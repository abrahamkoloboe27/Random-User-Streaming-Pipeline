x-airflow-common: 
  &airflow-common
  build : ./
  image: ${AIRFLOW_IMAGE_NAME:-extend_airflow:latest}
  environment : &airflow-common-env
    AIRFLOW__CORE__EXECUTOR : LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN : postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND : db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY : ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION : "false"
    AIRFLOW__CORE__LOAD_EXAMPLES : "false"
    POSTGRES_ETL_URL : "jdbc:postgresql://postgres:5432/etl"
    POSTGRES_ETL_USER : "etl"
    POSTGRES_ETL_PASSWORD : "etl"
  volumes :
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./dump:/opt/airflow/dump
  user : "${AIRFLOW_UID:-50000}:0"
  depends_on :
    postgres:
      condition : service_healthy

services:

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: etl@etl.com
      PGADMIN_DEFAULT_PASSWORD: etl
    ports:
      - "5050:80"
    networks:
      - confluent

  potgres-etl : 
    image : postgres:13
    environment :
      POSTGRES_USER : etl
      POSTGRES_PASSWORD : etl
      POSTGRES_DB : etl
    healthcheck :
      test : ["CMD-SHELL", "pg_isready -U etl"]
      interval : 5s
      retries : 5
      start_period : 10s
    volumes:
      - postgres-etl-volume:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
        - confluent

  zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - confluent

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres : 
    image : postgres:13
    environment :
      POSTGRES_USER : airflow
      POSTGRES_PASSWORD : airflow
      POSTGRES_DB : airflow
    healthcheck :
      test : ["CMD-SHELL", "pg_isready -U airflow"]
      interval : 5s
      retries : 5
      start_period : 10s
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
        - confluent

  airflow-scheduler : 
    << : *airflow-common
    command : scheduler
    depends_on :
      - postgres
    healthcheck :
      test : ["CMD-SHELL", "[ -f /opt/airflow/airflow-scheduler.pid ]"]
      interval : 10s
      timeout : 10s
      retries : 5
    networks:
        - confluent

  airflow-webserver : 
    << : *airflow-common
    command : webserver
    ports :
      - "8080:8080"
    healthcheck :
      test : ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval : 30s
      timeout : 30s
      retries : 3
    networks:
        - confluent


  airflow-init : 
    << : *airflow-common
    command : version
    environment :
      << : *airflow-common-env
      _AIRFLOW_DB_UPGRADE : "true"
      _AIRFLOW_WWW_USER_CREATE : "true"
      _AIRFLOW_WWW_USER_USERNAME : ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD : ${AIRFLOW_PASSWORD:-airflow}
    networks:
        - confluent

  

networks:
  confluent:
volumes:
  postgres-db-volume:
  postgres-etl-volume:


